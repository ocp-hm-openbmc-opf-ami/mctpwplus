From 2812c4cf098101a632a1a9dbe240eb0dcb92999f Mon Sep 17 00:00:00 2001
From: daiyaan-intel <daiyaan.ahmed@intel.com>
Date: Mon, 14 Nov 2022 18:43:20 +0530
Subject: [PATCH] Firmware update working

---
 mctp_impl.cpp           | 31 ++++++++++++++++--------
 mctp_kernel_binding.cpp | 52 ++++++++++++++++++++++++++++++++++-------
 mctp_kernel_binding.h   |  3 ++-
 3 files changed, 66 insertions(+), 20 deletions(-)

diff --git a/mctp_impl.cpp b/mctp_impl.cpp
index 4aeee7f..191509a 100644
--- a/mctp_impl.cpp
+++ b/mctp_impl.cpp
@@ -159,7 +159,7 @@ void MCTPImpl::triggerMCTPDeviceDiscovery(const eid_t dstEId)
 int MCTPImpl::reserveBandwidth(boost::asio::yield_context yield,
                                const eid_t dstEId, const uint16_t timeout)
 {
-    return 1;
+    return 0;
     auto it = this->endpointMap.find(dstEId);
     if (this->endpointMap.end() == it)
     {
@@ -195,7 +195,7 @@ int MCTPImpl::reserveBandwidth(boost::asio::yield_context yield,
 int MCTPImpl::releaseBandwidth(boost::asio::yield_context yield,
                                const eid_t dstEId)
 {
-    return 1;
+    return 0;
     auto it = this->endpointMap.find(dstEId);
     if (this->endpointMap.end() == it)
     {
@@ -701,11 +701,15 @@ void MCTPImpl::sendAsync(const SendCallback& callback, const eid_t dstEId,
 }
 
 std::pair<boost::system::error_code, int>
-    MCTPImpl::sendYield(boost::asio::yield_context& yield, const eid_t dstEId,
+    MCTPImpl::sendYield(boost::asio::yield_context& , const eid_t dstEId,
                         const uint8_t msgTag, const bool tagOwner,
                         const ByteArray& request)
 {
     std::cout<<"SendYield called"<<std::endl;
+    printf("Request: \n");
+    for(auto i: request){
+        printf("0x%02x ", i);
+    }
     auto it = this->endpointMap.find(dstEId);
     if (this->endpointMap.end() == it)
     {
@@ -720,11 +724,18 @@ std::pair<boost::system::error_code, int>
     boost::system::error_code ec =
         boost::system::errc::make_error_code(boost::system::errc::success);
 
-    int status = connection->yield_method_call<int>(
-        yield, ec, it->second.second, "/xyz/openbmc_project/mctp",
-        "xyz.openbmc_project.MCTP.Base", "SendMctpMessagePayload", dstEId,
-        msgTag, tagOwner, request);
-    status = 1;
+    int c = mctpk.sendMessageWithTag(0x09, request, msgTag , tagOwner);
+    if(c != static_cast<int>(request.size()-1)){
+        printf("\nSend failed with onlyu sending %d bytes\n", c);
+    }
+    else{
+        printf("\n%d bytes sent from sendyield\n", c);
+    }
+    //int status = connection->yield_method_call<int>(
+    //    yield, ec, it->second.second, "/xyz/openbmc_project/mctp",
+    //    "xyz.openbmc_project.MCTP.Base", "SendMctpMessagePayload", dstEId,
+    //    msgTag, tagOwner, request);
+    int status = 0;
     return std::make_pair(ec, status);
 }
 
@@ -810,7 +821,7 @@ MCTPImpl::MCTPImpl(boost::asio::io_context& ioContext,
     connection(std::make_shared<sdbusplus::asio::connection>(ioContext)),
     config(configIn), networkChangeCallback(networkChangeCb),
     receiveCallback(rxCb),
-    mctpk(0x01,1,ioContext) 
+    mctpk(0x01,1,ioContext, rxCb) 
 {
 }
 
@@ -822,7 +833,7 @@ MCTPImpl::MCTPImpl(std::shared_ptr<sdbusplus::asio::connection> conn,
     connection(conn),
     config(configIn), networkChangeCallback(networkChangeCb),
     receiveCallback(rxCb),
-    mctpk(0x01,1,conn->get_io_context())
+    mctpk(0x01,1,conn->get_io_context(),rxCb)
 {
 }
 }// namespace mctpw
diff --git a/mctp_kernel_binding.cpp b/mctp_kernel_binding.cpp
index 7e3d12e..eb816e7 100644
--- a/mctp_kernel_binding.cpp
+++ b/mctp_kernel_binding.cpp
@@ -5,8 +5,7 @@ void MCTPKernelBinding::setSd(int sock_d){
     this->sd = sock_d;
 }
 
-MCTPKernelBinding::MCTPKernelBinding(uint8_t type, int network, boost::asio::io_context& context):recv_timer(context), str(context) 
-
+MCTPKernelBinding::MCTPKernelBinding(uint8_t type, int network, boost::asio::io_context& context, ReceiveMessageCallback rxCb):recv_timer(context), str(context), receiveCallback(rxCb) 
 {
     addr.smctp_family = AF_MCTP;
     addr.smctp_tag = MCTP_TAG_OWNER;
@@ -101,20 +100,40 @@ void MCTPKernelBinding::read_looper(){
             char rxbuf[1048];
             int rc = receiveMessage(rxbuf,1048);
             if(rc<=0){
-            std::cout<<"Not received any, Trying again\n";
-            read_looper();
+                std::cout<<"Not received any, Trying again\n";
+                read_looper();
             }
             printf("Received %d bytes:\n",rc);
             std::vector<uint8_t> data;
             for(int i=0;i<rc;i++){
-            printf("0x%02x ",rxbuf[i]);
-            recv_timer.cancel();
-            data.push_back(rxbuf[i]); 
+                printf("0x%02x ",rxbuf[i]);
+                recv_timer.cancel();
+                data.push_back(rxbuf[i]); 
             }
             printf("\nReceive Tag: 0x%02x\n",recv_addr.smctp_tag);
-            queue[recv_addr.smctp_tag] = data;
+            uint8_t tagOwner = ((recv_addr.smctp_tag&0x08) >>3);
+            if(tagOwner==0x01){
+                data.insert(data.begin(),0x01);
+                void* ptr = nullptr;
+                printf("Tag owner: 0x%02x\n", tagOwner);
+                printf("\nmsgTag: 0x%02x\n", (recv_addr.smctp_tag&0x07));
+                if(tagOwner == 0x01){
+                boost::asio::post([this,ptr, data ](){
+                        this->receiveCallback(ptr, recv_addr.smctp_addr.s_addr,true, (recv_addr.smctp_tag&0x07) ,data, 1);
+                        });
+            }
+                else{
+
+                boost::asio::post([this,ptr, data ](){
+                        this->receiveCallback(ptr, recv_addr.smctp_addr.s_addr,false, (recv_addr.smctp_tag&0x07) ,data, 1);
+                        });
+                }
+            }
+            else{
+                queue[recv_addr.smctp_tag] = data;
+            }
             read_looper();
-            }); 
+    }); 
 }
 
 void MCTPKernelBinding::setResponseTag(){
@@ -159,6 +178,21 @@ int MCTPKernelBinding::sendMessage(mctp_eid_t destination_eid,const ByteArray& m
     return rc;
 }
 
+int MCTPKernelBinding::sendMessageWithTag(mctp_eid_t destination_eid,const ByteArray& message, uint8_t msgTag, bool tagOwner){
+    size_t message_size = message.size();
+    setEid(destination_eid);
+    auto p = message.data();
+    p++;
+    message_size = message_size-1;
+    if(tagOwner == 1){
+        msgTag = msgTag | 0x08;
+    }
+    addr.smctp_tag = msgTag;
+    printf("Sending message tag: 0x%02x",addr.smctp_tag);
+    int rc = sendto(sd, p, message_size, 0, reinterpret_cast<sockaddr*>(&addr), sizeof(struct sockaddr_mctp)); 
+    return rc;
+}
+
 int MCTPKernelBinding::receiveMessage(char rxbuf[], int recv_len){
     socklen_t recv_addr_len = sizeof(recv_addr);
     int rc = recvfrom(sd, rxbuf, recv_len , 0 , reinterpret_cast<struct sockaddr*>(&recv_addr), &recv_addr_len);
diff --git a/mctp_kernel_binding.h b/mctp_kernel_binding.h
index 57a37b9..948d71e 100644
--- a/mctp_kernel_binding.h
+++ b/mctp_kernel_binding.h
@@ -16,7 +16,7 @@ using ReceiveMessageCallback = std::function<void(void*, mctp_eid_t, bool, uint8
 class MCTPKernelBinding
 {
     public:
-    MCTPKernelBinding(uint8_t type, int network,boost::asio::io_context& io_context);
+    MCTPKernelBinding(uint8_t type, int network,boost::asio::io_context& io_context, ReceiveMessageCallback rxCb);
     struct sockaddr_mctp addr;
     struct sockaddr_mctp recv_addr;
     std::unordered_map<uint8_t,std::vector<uint8_t>> queue;
@@ -27,6 +27,7 @@ class MCTPKernelBinding
     boost::asio::posix::stream_descriptor str;
     int yield_receive(boost::asio::yield_context yield,std::vector<uint8_t> &response, uint8_t tag, std::chrono::milliseconds timeout);
     ReceiveMessageCallback receiveCallback;
+int sendMessageWithTag(mctp_eid_t destination_eid,const ByteArray& message, uint8_t msgTag, bool tagOwner );
     void setSd(int sock_d);
     void setResponseTag();
     int createSocket();
-- 
2.34.1

